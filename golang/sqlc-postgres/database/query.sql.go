// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :exec
delete from public.users 
where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAllUFs = `-- name: GetAllUFs :many
select id, created_at, updated_at, deleted_at, nome, sigla from public.ufs
order by id
`

func (q *Queries) GetAllUFs(ctx context.Context) ([]Uf, error) {
	rows, err := q.db.Query(ctx, getAllUFs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Uf
	for rows.Next() {
		var i Uf
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Nome,
			&i.Sigla,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, created_at, updated_at, deleted_at, name, email, password FROM public.users
ORDER BY id
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCidadePorUF = `-- name: GetCidadePorUF :many
select cidades.nome, cidades.codigo_ibge, ufs.sigla from cidades 
inner join ufs on cidades.uf_id = ufs.id
where ufs.sigla = $1
`

type GetCidadePorUFRow struct {
	Nome       pgtype.Text
	CodigoIbge pgtype.Text
	Sigla      pgtype.Text
}

func (q *Queries) GetCidadePorUF(ctx context.Context, sigla pgtype.Text) ([]GetCidadePorUFRow, error) {
	rows, err := q.db.Query(ctx, getCidadePorUF, sigla)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCidadePorUFRow
	for rows.Next() {
		var i GetCidadePorUFRow
		if err := rows.Scan(&i.Nome, &i.CodigoIbge, &i.Sigla); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
select id, created_at, updated_at, deleted_at, name, email, password from public.users 
where public.users.id = $1 limit 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
insert into public.users (
  name, email, password
) values (
  $1, $2, $3
) 
returning id, created_at, updated_at, deleted_at, name, email, password
`


type InsertUserParams struct {
	Name     string
	Email    string
	Password string
}

// type InsertUserParams struct {
// 	Name     pgtype.Text
// 	Email    pgtype.Text
// 	Password pgtype.Text
// }

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
update public.users
  set name = $2,
  email = $3,
  password = $4 
where id = $1
`

type UpdateUserParams struct {
	ID       int64
	Name     string
	Email    string 
	Password string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}
