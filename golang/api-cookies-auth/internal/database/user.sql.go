// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, 
    name, 
    username, 
    email, 
    password, 
    created_at, 
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
    ) RETURNING id, created_at, updated_at, name, username, email, password
`

type CreateUserParams struct {
	ID        int32
	Name      pgtype.Text
	Username  pgtype.Text
	Email     pgtype.Text
	Password  pgtype.Text
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
select id, created_at, updated_at, name, username, email, password 
from users 
where email = $1
limit 1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, username, email, password
FROM public.users
WHERE public.users.id = $1
LIMIT 1
`

type FindUserByIdRow struct {
	ID       int32
	Username pgtype.Text
	Email    pgtype.Text
	Password pgtype.Text
}

func (q *Queries) FindUserById(ctx context.Context, id int32) (FindUserByIdRow, error) {
	row := q.db.QueryRow(ctx, findUserById, id)
	var i FindUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}
